// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NTTDataTest.Domain.Context;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace NTTDataTest.Domain.Migrations
{
    [DbContext(typeof(NTTContext))]
    [Migration("20250320235403_AddCartItems")]
    partial class AddCartItems
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("NTTDataTest.Domain.Entities.Address", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<string>("city")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("number")
                        .HasColumnType("integer");

                    b.Property<string>("street")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("userid")
                        .HasColumnType("integer");

                    b.Property<string>("zipcode")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)");

                    b.HasKey("id");

                    b.HasIndex("userid")
                        .IsUnique();

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("NTTDataTest.Domain.Entities.Cart", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<DateTime>("date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("userid")
                        .HasColumnType("integer");

                    b.HasKey("id");

                    b.HasIndex("userid");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("NTTDataTest.Domain.Entities.CartItem", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<int>("cartid")
                        .HasColumnType("integer");

                    b.Property<int>("productid")
                        .HasColumnType("integer");

                    b.Property<int>("quantity")
                        .HasColumnType("integer");

                    b.HasKey("id");

                    b.HasIndex("cartid");

                    b.HasIndex("productid");

                    b.ToTable("CartItem");
                });

            modelBuilder.Entity("NTTDataTest.Domain.Entities.Product", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<string>("category")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("image")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("price")
                        .HasPrecision(10, 2)
                        .HasColumnType("double precision");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.HasKey("id");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("NTTDataTest.Domain.Entities.User", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("phone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("role")
                        .HasColumnType("integer");

                    b.Property<int>("status")
                        .HasColumnType("integer");

                    b.Property<string>("username")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.HasKey("id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("NTTDataTest.Domain.Entities.Address", b =>
                {
                    b.HasOne("NTTDataTest.Domain.Entities.User", "user")
                        .WithOne("address")
                        .HasForeignKey("NTTDataTest.Domain.Entities.Address", "userid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("NTTDataTest.Domain.Entities.Geolocation", "geolocation", b1 =>
                        {
                            b1.Property<int>("Addressid")
                                .HasColumnType("integer");

                            b1.Property<string>("lat")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("lng")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("Addressid");

                            b1.ToTable("Addresses");

                            b1.WithOwner()
                                .HasForeignKey("Addressid");
                        });

                    b.Navigation("geolocation")
                        .IsRequired();

                    b.Navigation("user");
                });

            modelBuilder.Entity("NTTDataTest.Domain.Entities.Cart", b =>
                {
                    b.HasOne("NTTDataTest.Domain.Entities.User", "user")
                        .WithMany()
                        .HasForeignKey("userid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("user");
                });

            modelBuilder.Entity("NTTDataTest.Domain.Entities.CartItem", b =>
                {
                    b.HasOne("NTTDataTest.Domain.Entities.Cart", "cart")
                        .WithMany("products")
                        .HasForeignKey("cartid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NTTDataTest.Domain.Entities.Product", "product")
                        .WithMany()
                        .HasForeignKey("productid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("cart");

                    b.Navigation("product");
                });

            modelBuilder.Entity("NTTDataTest.Domain.Entities.Product", b =>
                {
                    b.OwnsOne("NTTDataTest.Domain.Entities.Rating", "rating", b1 =>
                        {
                            b1.Property<int>("Productid")
                                .HasColumnType("integer");

                            b1.Property<int>("count")
                                .HasColumnType("integer");

                            b1.Property<double>("rate")
                                .HasPrecision(5, 2)
                                .HasColumnType("double precision");

                            b1.HasKey("Productid");

                            b1.ToTable("Products");

                            b1.WithOwner()
                                .HasForeignKey("Productid");
                        });

                    b.Navigation("rating")
                        .IsRequired();
                });

            modelBuilder.Entity("NTTDataTest.Domain.Entities.User", b =>
                {
                    b.OwnsOne("NTTDataTest.Domain.Entities.Name", "name", b1 =>
                        {
                            b1.Property<int>("Userid")
                                .HasColumnType("integer");

                            b1.Property<string>("firstname")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("lastname")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("Userid");

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("Userid");
                        });

                    b.Navigation("name")
                        .IsRequired();
                });

            modelBuilder.Entity("NTTDataTest.Domain.Entities.Cart", b =>
                {
                    b.Navigation("products");
                });

            modelBuilder.Entity("NTTDataTest.Domain.Entities.User", b =>
                {
                    b.Navigation("address")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
